{"version":3,"sources":["logo.svg","components/board/node/Node.jsx","components/Header.jsx","global.js","components/Menu.jsx","components/board/Board.jsx","components/Main.jsx","Carox.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","onNodeClick","x","y","setState","clickClass","state","this","xplayer","oplayer","classSize","extraClassName","className","onClick","alt","Component","Header","src","logo","gameScreen","Menu","onMenuClick","Board","nodes","turn","num","row","board","size","currentRow","col","currentNode","push","console","log","map","rowIdx","key","node","nodeIdx","onBoardClick","Main","screenIndex","Carox","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6407dde4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            clickClass: \"\"\n        };\n    }\n\n    onNodeClick = () => {\n        const {x, y} = this.props;\n        this.setState({clickClass: \"node-x\"});\n        this.props.onNodeClick(x, y);\n    }\n    \n    render(){\n        const {xplayer, oplayer, classSize} = this.props;\n        var extraClassName = xplayer ? 'node-x' : oplayer ? 'node-o' : '';\n        \n        return  <div \n                    className={`node ${classSize} ${extraClassName} ${this.state.clickClass}`}\n                    onClick={() => this.onNodeClick()}\n                >\n                    <img alt=\"\" />\n                </div>;\n    }\n}\n\nexport const DEFAULT_NODE = {\n    row: 0,\n    col: 0\n};","import React, {Component} from 'react';\nimport logo from '../logo.svg';\nimport './Header.css';\n\nimport Node from './board/node/Node';\n\nexport default class Header extends Component {\n\t\n\n\trender(){\n\n\t\treturn <div className=\"carox-header\">\n\t\t\t\t <div className=\"flex-grow-1\"> \n\t\t\t\t \t<h5 className=\"player\">Player 1</h5>\n\t\t\t\t \t<Node xplayer={true}/> \n\t\t\t\t </div>\n\t\t\t\t <div className=\"flex-grow-8\">\n\t\t\t\t \t<img src={logo} className=\"Carox-logo\" alt=\"logo\"/>\n\t\t\t\t </div>\n\t\t\t\t <div className=\"flex-grow-1\"> \n\t\t\t\t \t<Node oplayer={true}/> \n\t\t\t\t \t<h5 className=\"player\">Player 2</h5>\n\t\t\t\t </div>\n\t\t\t   </div>\n\t}\n\n}","export const gameScreen = {\n    Home: 0,\n    Caro: 1,\n    TicTacToe: 2\n  };","import React, {Component} from 'react';\nimport {gameScreen} from '../global'\n\nimport './Menu.css';\n\nexport default class Menu extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t}\n\n\trender(){\n\n\t\treturn (\n\t\t\t<div className=\"e-menu\">\n\t\t\t\t<div className=\"menu-button\" \n\t\t\t\tonClick={() => this.props.onMenuClick(gameScreen.Caro)}>\n\t\t\t\t\t<h2>Gomoku - caro</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"menu-button\" \n\t\t\t\tonClick={() => this.props.onMenuClick(gameScreen.TicTacToe)}>\n\t\t\t\t\t<h2>Tic Tac Toe</h2>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, {Component} from 'react';\nimport Node from './node/Node';\n\nimport './Board.css';\n\nexport default class Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: []\n        };\n        this.turn = {\n          xplayer: 0,\n          oplayer: 0,\n          num: 0\n        }\n    }\n    \n    componentDidMount(){\n        const nodes = [];\n        for(let row = 0; row < this.props.board.size.row; row++){\n            const currentRow = [];\n            for(let col = 0; col < this.props.board.size.col; col++){\n                const currentNode = {\n                    col, \n                    row,\n                    xplayer: false,\n                    oplayer: col === 0 && row === 0,\n                    y: this.props.board.size.row - row - 1,\n                    x: col\n                };\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes});\n    }\n\n    onBoardClick (x, y) {\n      console.log(x, y);\n    }\n\n    render(){\n        const {nodes} = this.state,\n              {size} = this.props.board;\n        \n        \n        return (\n            <div className=\"grid\">\n              {nodes.map((row, rowIdx) => {\n                    return (\n                     <div key={rowIdx}>\n                       {row.map((node, nodeIdx) => {\n                        const {xplayer, oplayer, x, y} =  node;\n                                \n                        return (\n                         <Node \n                             key={nodeIdx} \n                             xplayer={xplayer} \n                             oplayer={oplayer}\n                             x={x}\n                             y={y}\n                             classSize={size.row < 5 && size.col < 5 ? 'node-100' : (size.row < 10 && size.col < 10 ? 'node-50' : 'node-25')} \n                             onNodeClick={this.onBoardClick}\n                          />\n                        );}\n                      )}\n                     </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport {gameScreen} from '../global'\nimport Menu from './Menu'\nimport './Menu.css';\nimport Board from './board/Board'\n\nexport default class Main extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tscreenIndex: gameScreen.Home,\n\t\t\tboard: {\n\t\t\t\tsize: {row: 3, col: 3}\n\t\t\t}\n\t\t}\n\t}\n\n\tonMenuClick = (screenIndex) => {\n\t\tconsole.log('onMenuClick ' + screenIndex);\n\t\tthis.setState({screenIndex});\n\t}\n\n\trender(){\n\t\tconst {screenIndex, board} = this.state;\n\t\tswitch(screenIndex){\n\t\t\tcase gameScreen.Caro:\n\t\t\t\tboard.size = {row: 30, col: 52};\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Board board={board}/>\n\t\t\t\t\t\t<div className=\"menu-button\" \n\t\t\t\t\t\t\tonClick={() => this.onMenuClick(gameScreen.Home)}>\n\t\t\t\t\t\t\t<h2>Back</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tbreak;\n\t\t\tcase gameScreen.TicTacToe:\n\t\t\t\tboard.size = {row: 3, col: 3};\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Board board={board}/>\n\t\t\t\t\t\t<div className=\"menu-button menu-button-back\" \n\t\t\t\t\t\t\tonClick={() => this.onMenuClick(gameScreen.Home)}>\n\t\t\t\t\t\t\t<h2>Back</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn (\n\t\t\t\t\t<Menu onMenuClick={this.onMenuClick}/>\n\t\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n}","import React from 'react';\n\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport {gameScreen} from './global'\n\nimport './Carox.css';\n\nfunction Carox() {\n  var screenIdx = gameScreen.Home;\n\n  return (\n    <div className=\"Carox\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default Carox;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Carox from './Carox';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Carox />, document.getElementById('carox'));\n\n// If you want your app to work offline and load faster, you can change unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}