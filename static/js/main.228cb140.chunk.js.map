{"version":3,"sources":["logo.svg","components/board/node/Node.jsx","components/board/Board.jsx","components/Header.jsx","Carox.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","onNodeClick","x","y","setState","eClassName","state","this","xplayer","oplayer","extraClassName","className","onClick","alt","Component","Board","nodes","size","row","col","turn","num","currentRow","currentNode","push","console","log","map","rowIdx","key","node","nodeIdx","onBoardClick","Header","src","logo","Carox","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,kC,wPCGtBC,G,kBACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAMVC,YAAc,WAAO,IAAD,EACD,EAAKD,MAAbE,EADS,EACTA,EAAGC,EADM,EACNA,EACV,EAAKC,SAAS,CAACC,WAAY,WAC3B,EAAKL,MAAMC,YAAYC,EAAGC,IAR1B,EAAKG,MAAQ,CACTD,WAAY,IAHF,E,sEAaT,IAAD,SACuBE,KAAKP,MAAzBQ,EADH,EACGA,QAASC,EADZ,EACYA,QACVC,EAAiBF,EAAU,SAAWC,EAAU,SAAW,GAEjE,OAAQ,yBACIE,UAAS,eAAUD,EAAV,YAA4BH,KAAKD,MAAMD,YAChDO,QAAS,kBAAM,EAAKX,gBAEpB,yBAAKY,IAAI,U,GAtBKC,cCEbC,G,kBACjB,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KACDM,MAAQ,CACTU,MAAO,GACPC,KAAM,CAACC,IAAK,GAAIC,IAAK,KAEzB,EAAKC,KAAO,CACVZ,QAAS,EACTC,QAAS,EACTY,IAAK,GATQ,E,iFAef,IADA,IAAML,EAAQ,GACNE,EAAM,EAAGA,EAAMX,KAAKD,MAAMW,KAAKC,IAAKA,IAAM,CAE9C,IADA,IAAMI,EAAa,GACXH,EAAM,EAAGA,EAAMZ,KAAKD,MAAMW,KAAKE,IAAKA,IAAM,CAC9C,IAAMI,EAAc,CAChBJ,MACAD,MACAV,SAAS,EACTC,QAAiB,IAARU,GAAqB,IAARD,EACtBf,EAAGI,KAAKD,MAAMW,KAAKC,IAAMA,EAAM,EAC/BhB,EAAGiB,GAEPG,EAAWE,KAAKD,GAEpBP,EAAMQ,KAAKF,GAEff,KAAKH,SAAS,CAACY,Y,mCAGLd,EAAGC,GACfsB,QAAQC,IAAIxB,EAAGC,K,+BAGR,IAAD,OACGa,EAAST,KAAKD,MAAdU,MAGP,OACI,yBAAKL,UAAU,QACZK,EAAMW,KAAI,SAACT,EAAKU,GACX,OACC,yBAAKC,IAAKD,GACPV,EAAIS,KAAI,SAACG,EAAMC,GAAa,IACrBvB,EAA2BsB,EAA3BtB,QAASC,EAAkBqB,EAAlBrB,QAASP,EAAS4B,EAAT5B,EAAGC,EAAM2B,EAAN3B,EAE5B,OACC,kBAAC,EAAD,CACI0B,IAAKE,EACLvB,QAASA,EACTC,QAASA,EACTP,EAAGA,EACHC,EAAGA,EACHF,YAAa,EAAK+B,2B,GAzDZlB,c,gBCCdmB,G,uLAKnB,OAAO,yBAAKtB,UAAU,gBACnB,yBAAKA,UAAU,eACd,wBAAIA,UAAU,UAAd,YACA,kBAAC,EAAD,CAAMH,SAAS,KAEhB,yBAAKG,UAAU,eACd,yBAAKuB,IAAKC,IAAMxB,UAAU,aAAaE,IAAI,UAE5C,yBAAKF,UAAU,eACd,kBAAC,EAAD,CAAMF,SAAS,IACf,wBAAIE,UAAU,UAAd,kB,GAf8BG,cCQrBsB,MATf,WACE,OACE,yBAAKzB,UAAU,SACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,UD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.228cb140.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            eClassName: \"\"\n        };\n    }\n\n    onNodeClick = () => {\n        const {x, y} = this.props;\n        this.setState({eClassName: \"node-x\"});\n        this.props.onNodeClick(x, y);\n    }\n    \n    render(){\n        const {xplayer, oplayer} = this.props;\n        const extraClassName = xplayer ? 'node-x' : oplayer ? 'node-o' : '';\n        \n        return  <div \n                    className={`node ${extraClassName} ${this.state.eClassName}`}\n                    onClick={() => this.onNodeClick()}\n                >\n                    <img alt=\"\" />\n                </div>;\n    }\n}\n\nexport const DEFAULT_NODE = {\n    row: 0,\n    col: 0\n};","import React, {Component} from 'react';\nimport Node from './node/Node';\n\nimport './Board.css';\n\nexport default class Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: [],\n            size: {row: 30, col: 52}\n        };\n        this.turn = {\n          xplayer: 0,\n          oplayer: 0,\n          num: 0\n        }\n    }\n    \n    componentDidMount(){\n        const nodes = [];\n        for(let row = 0; row < this.state.size.row; row++){\n            const currentRow = [];\n            for(let col = 0; col < this.state.size.col; col++){\n                const currentNode = {\n                    col, \n                    row,\n                    xplayer: false,\n                    oplayer: col === 0 && row === 0,\n                    y: this.state.size.row - row - 1,\n                    x: col\n                };\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes});\n    }\n\n    onBoardClick (x, y) {\n      console.log(x, y);\n    }\n\n    render(){\n        const {nodes} = this.state;\n        \n        \n        return (\n            <div className=\"grid\">\n              {nodes.map((row, rowIdx) => {\n                    return (\n                     <div key={rowIdx}>\n                       {row.map((node, nodeIdx) => {\n                        const {xplayer, oplayer, x, y} =  node;\n                                \n                        return (\n                         <Node \n                             key={nodeIdx} \n                             xplayer={xplayer} \n                             oplayer={oplayer}\n                             x={x}\n                             y={y} \n                             onNodeClick={this.onBoardClick}\n                          ></Node>\n                        );}\n                      )}\n                     </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport logo from '../logo.svg';\nimport './Header.css';\n\nimport Node from './board/node/Node';\n\nexport default class Header extends Component {\n\t\n\n\trender(){\n\n\t\treturn <div className=\"carox-header\">\n\t\t\t\t <div className=\"flex-grow-1\"> \n\t\t\t\t \t<h5 className=\"player\">Player 1</h5>\n\t\t\t\t \t<Node xplayer={true}/> \n\t\t\t\t </div>\n\t\t\t\t <div className=\"flex-grow-8\">\n\t\t\t\t \t<img src={logo} className=\"Carox-logo\" alt=\"logo\"/>\n\t\t\t\t </div>\n\t\t\t\t <div className=\"flex-grow-1\"> \n\t\t\t\t \t<Node oplayer={true}/> \n\t\t\t\t \t<h5 className=\"player\">Player 2</h5>\n\t\t\t\t </div>\n\t\t\t   </div>\n\t}\n\n}","import React from 'react';\nimport './Carox.css';\nimport Board from './components/board/Board'\nimport Header from './components/Header'\n\nfunction Carox() {\n  return (\n    <div className=\"Carox\">\n      <Header />\n      <Board />\n    </div>\n  );\n}\n\nexport default Carox;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Carox from './Carox';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Carox />, document.getElementById('carox'));\n\n// If you want your app to work offline and load faster, you can change unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}